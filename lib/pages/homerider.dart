import 'dart:developer';
import 'package:blink_delivery_project/model/get_rider_re.dart';
import 'package:blink_delivery_project/pages/EditRider.dart';
import 'package:blink_delivery_project/pages/RiderTo.dart';
import 'package:blink_delivery_project/pages/riderhistory.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:geolocator/geolocator.dart';

class HomeriderPage extends StatefulWidget {
  final String uid;
  const HomeriderPage({super.key, required this.uid});

  @override
  State<HomeriderPage> createState() => _HomeriderPageState();
}

class _HomeriderPageState extends State<HomeriderPage> {
  int _currentIndex = 0;
  Rider? _rider;

  @override
  void initState() {
    super.initState();
    _fetchRider();
  }

  Future<void> _fetchRider() async {
    final rider = await _getRider(widget.uid);
    setState(() {
      _rider = rider;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (_rider == null) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }

    List<Widget> pages = [
      _buildHomePage(_rider!), // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      Ridertopage(uid: widget.uid), // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á
      Riderhistory(uid: widget.uid), // üïì ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    ];

    return Scaffold(
      body: IndexedStack(index: _currentIndex, children: pages),
      bottomNavigationBar: Container(
        height: 76,
        decoration: const BoxDecoration(
          color: Colors.white,
          boxShadow: [
            BoxShadow(
              color: Colors.black26,
              offset: Offset(0, -2),
              blurRadius: 10,
            ),
          ],
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            BottomNavItem(
              icon: Icons.home,
              label: "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô",
              onTap: () => setState(() => _currentIndex = 0),
            ),
            BottomNavItem(
              icon: Icons.delivery_dining,
              label: "‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á",
              onTap: () => setState(() => _currentIndex = 1),
            ),
            BottomNavItem(
              icon: Icons.history,
              label: "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏á",
              onTap: () => setState(() => _currentIndex = 2),
            ),
            BottomNavItem(
              icon: Icons.logout,
              label: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
              onTap: () {
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö'),
                    content: const Text('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö?'),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.of(context).pop(),
                        child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
                      ),
                      TextButton(
                        onPressed: () {
                          Navigator.of(
                            context,
                          ).popUntil((route) => route.isFirst);
                        },
                        child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
                      ),
                    ],
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  /// ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå + ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Order
  Widget _buildHomePage(Rider rider) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Column(
        children: [
          // üî¥ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
          Container(
            height: 200,
            width: double.infinity,
            color: const Color(0xFFFF3B30),
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 40),
              child: Row(
                children: [
                  CircleAvatar(
                    radius: 40,
                    backgroundImage: NetworkImage(rider.profilePhoto),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${rider.fullname}",
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 8),
                        GestureDetector(
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) =>
                                    EditriderpagState(uid: widget.uid),
                              ),
                            );
                          },
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 6,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(10),
                            ),
                            child: const Text(
                              "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
                              style: TextStyle(
                                color: Color(0xFFFF3B30),
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),

          // üì¶ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
          Expanded(child: _buildOrderList()),
        ],
      ),
    );
  }

  /// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö
  Widget _buildOrderList() {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection('orders')
          .orderBy('createAt', descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return const Center(child: CircularProgressIndicator());
        }

        final orders = snapshot.data!.docs;

        if (orders.isEmpty) {
          return const Center(child: Text("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"));
        }

        return ListView.builder(
          itemCount: orders.length,
          itemBuilder: (context, index) {
            final data = orders[index].data() as Map<String, dynamic>;
            final orderId = orders[index].id;

            final hasRider = (data['rider_id'] ?? '').toString().isNotEmpty;
            final status = data['status'] ?? '';

            // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            if (hasRider && status != '‡∏£‡∏≠‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤') {
              return const SizedBox.shrink();
            }

            return Card(
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              child: ListTile(
                leading: data['items'] != null && data['items'].isNotEmpty
                    ? Image.network(
                        data['items'][0]['imageUrl'],
                        width: 60,
                        height: 60,
                        fit: BoxFit.cover,
                      )
                    : const Icon(Icons.inventory),

                // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö real-time
                title: FutureBuilder<DocumentSnapshot>(
                  future: FirebaseFirestore.instance
                      .collection('users')
                      .doc(data['receiver_id'])
                      .get(),
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return const Text("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö...");
                    }
                    if (!snapshot.hasData || !snapshot.data!.exists) {
                      return const Text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö");
                    }
                    final userData =
                        snapshot.data!.data() as Map<String, dynamic>?;
                    final receiverName =
                        userData?['fullname'] ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö';
                    return Text(
                      receiverName,
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    );
                  },
                ),

                subtitle: Text(
                  data['receiver_address'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),

                trailing: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: hasRider
                        ? Colors.grey
                        : const Color(0xFFFF3B30),
                  ),
                  onPressed: hasRider
                      ? null
                      : () async {
                          try {
                            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
                            final allOrders = await FirebaseFirestore.instance
                                .collection('orders')
                                .where('rider_id', isEqualTo: widget.uid)
                                .get();

                            final activeOrders = allOrders.docs.where((doc) {
                              final data = doc.data() as Map<String, dynamic>;
                              return data['status'] != '‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏≥‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß';
                            }).toList();

                            if (activeOrders.isNotEmpty) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text(
                                    '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô',
                                  ),
                                ),
                              );
                              return;
                            }

                            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Rider
                            bool serviceEnabled =
                                await Geolocator.isLocationServiceEnabled();
                            if (!serviceEnabled) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î GPS ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô'),
                                ),
                              );
                              return;
                            }

                            LocationPermission permission =
                                await Geolocator.checkPermission();
                            if (permission == LocationPermission.denied) {
                              permission = await Geolocator.requestPermission();
                              if (permission == LocationPermission.denied) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á',
                                    ),
                                  ),
                                );
                                return;
                              }
                            }

                            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                            Position position =
                                await Geolocator.getCurrentPosition(
                                  desiredAccuracy: LocationAccuracy.high,
                                );

                            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Order ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Rider
                            await FirebaseFirestore.instance
                                .collection('orders')
                                .doc(orderId)
                                .update({
                                  'rider_id': widget.uid,
                                  'status':
                                      '‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)',
                                  'rider_latitude': position.latitude,
                                  'rider_longitude': position.longitude,
                                  'rider_accept_time':
                                      FieldValue.serverTimestamp(),
                                });

                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(content: Text('‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ')),
                            );

                            // ‚úÖ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ ‚Äú‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á‚Äù
                            setState(() {
                              _currentIndex = 1;
                            });
                          } catch (e) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
                            );
                          }
                        },
                  child: const Text("‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô"),
                ),
              ),
            );
          },
        );
      },
    );
  }

  /// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Rider ‡∏à‡∏≤‡∏Å Firestore
  Future<Rider?> _getRider(String uid) async {
    final doc = await FirebaseFirestore.instance
        .collection('riders')
        .doc(uid)
        .get();
    if (!doc.exists) {
      log('‚ùå No rider found for uid $uid');
      return null;
    }
    log('‚úÖ Rider data: ${doc.data()}');
    return Rider.fromMap(doc.id, doc.data()!);
  }
}

/// ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πà‡∏≤‡∏á Navbar
class BottomNavItem extends StatelessWidget {
  final IconData icon;
  final String label;
  final VoidCallback onTap;

  const BottomNavItem({
    super.key,
    required this.icon,
    required this.label,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, color: Colors.black),
          const SizedBox(height: 5),
          Text(
            label,
            style: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold),
          ),
        ],
      ),
    );
  }
}